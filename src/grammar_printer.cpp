#include "pch.hpp"
#include "grammar_printer.hpp"

void printGrammar(const Grammar& grammar, const std::filesystem::path& ofilename) {
    if(ofilename.empty() == true) {
        return;
    }

    auto map = std::ofstream(ofilename);

    print(map, "# Notes");
    print(map, "- This file is best viewed in Visual Studio Code using the Mermaid Preview plugin.");
    print(map, "- This file was generated by Yantra (will be overwritten on every run).");
    print(map, "- Parser is CLR(1) at the moment.");

    print(map, "# Lexer State Machine");

    std::vector<size_t> endStates;
    print(map, "```mermaid");
    print(map, "stateDiagram");
    for(auto& ps : grammar.states) {
        auto& state = *ps;

        auto txs = state.transitions;
        txs.insert(txs.end(), state.superTransitions.begin(), state.superTransitions.end());
        txs.insert(txs.end(), state.shadowTransitions.begin(), state.shadowTransitions.end());

        for(auto& tx : txs) {
            print(map, "  {} --> {}:{}", state.id, zid(tx->next), tx->str(true));
        }

        std::string c;
        if(state.closure != nullptr) {
            c = "*";
        }
        if(state.matchedRegex) {
            print(map, "state \"{}{}<br/>({})\" as {}", state.id, c, state.matchedRegex->regexName, state.id);
            endStates.push_back(state.id);
        }else{
            print(map, "state \"{}{}\" as {}", state.id, c, state.id);
        }

        if(state.checkEOF) {
            print(map, "state \"{} -> END\" as {}", state.id, state.id);
        }
    }

    print(map, "classDef startState font-weight:bold,stroke-width:2px,stroke:blue;");
    print(map, "  class {} startState", 1);
    print(map, "classDef endState font-weight:bold,stroke-width:2px,stroke:green;");
    for(auto& s : endStates) {
        print(map, "  class {} endState", s);
    }
    print(map, "```");

    print(map, "# LALR(1) State Machine");
    print(map, "```mermaid");
    print(map, "%%{{init: {{ 'maxTextSize': 999999999 }}}}%%");
    print(map, "stateDiagram");
    if(grammar.itemSets.size() < 32) {
        for(auto& ps : grammar.itemSets) {
            auto& itemSet = *ps;
            print(map, "state \"== State:{} ==", itemSet.id);
            for(auto& c : itemSet.configs) {
                print(map, "{}<br/>", c->str());
            }
            print(map, "\" as S{}", itemSet.id);
        }
    }

    endStates.clear();
    for(auto& ps : grammar.itemSets) {
        auto& itemSet = *ps;
        for(auto& t : itemSet.shifts) {
            print(map, "S{} --> S{}: SHIFT ON [{}]", itemSet.id, t.second.next->id, t.first->name);
        }

        for(auto& t : itemSet.reduces) {
            print(map, "S{} --> R{}: REDUCE ON [{}]", itemSet.id, t.second.next->rule.ruleName, t.first->name);
        }

        for(auto& t : itemSet.gotos) {
            print(map, "S{} --> S{}: GOTO ON [{}]", itemSet.id, t.second->id, t.first->name);
        }

        if(itemSet.reduces.size() > 0) {
            endStates.push_back(itemSet.id);
        }
    }

    print(map, "classDef startState font-weight:bold,stroke-width:2px,stroke:blue;");
    print(map, "  class S{} startState", 1);
    print(map, "classDef endState font-weight:bold,stroke-width:2px,stroke:green;");
    for(auto& s : endStates) {
        print(map, "  class S{} endState", s);
    }
    print(map, "```");
}
